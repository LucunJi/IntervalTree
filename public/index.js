(()=>{"use strict";var t={d:(e,s)=>{for(var i in s)t.o(s,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:s[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{Y:()=>O});const e=jQuery;class s{constructor(t){this.state=t,this.state.onEnter(this)}transit(t){this.state.onExit(),this.state=t,this.state.onEnter(this)}}class i{constructor(t,e){this.graph=t,this.index=e}canSimulate(t){return void 0!==this.graph[this.index].actionIdx[t]}simulate(t){this.canSimulate(t)&&(this.index=this.graph[this.index].actionIdx[t])}currentNode(){return this.graph[this.index]}}const o=JXG;function n(t,e){return Math.random()*(e-t)+t}function r(t,e,s,i=!0,o=!0){if(0===s)return[];if(1===s)return[i?t:o?e:(t+e)/2];const n=(e-t)/(o&&i?s-1:o||i?s:s+1),r=[];let d=i?t:t+n;for(let t=0;t<s;t++)r.push(d),d+=n;return r}function d(t,e,s){const i=(e-t)*s,o=e-(e-t-i)/2;return[o-i,o]}const h=sdsl;function a(t,e){Array.isArray(t)||(t=[t]),t.forEach((t=>t.suspendUpdate())),e(),t.forEach((t=>t.unsuspendUpdate()))}function l(t){return t.point1.coords.usrCoords[1]<t.point2.coords.usrCoords[1]?[t.point1,t.point2]:[t.point2,t.point1]}function c(t){const[e,s]=l(t);return{left:e.coords.usrCoords[1],right:s.coords.usrCoords[1],range:s.coords.usrCoords[1]-e.coords.usrCoords[1]}}function u(t,e){const{left:s,right:i}=c(t);return e>i?-1:e<s?1:0}function*g(t,e=0){let s=e;for(const e of t)yield[s++,e]}function*p(...t){switch(t.length){case 1:for(let e=0;e<t[0];e++)yield e;return;case 2:for(let e=t[0];e<t[1];e++)yield e;return;case 3:for(let e=t[0];e<t[1];e+=t[2])yield e;return}}const b=["#bc0101","#ffd700","#ea5f94","#ff7300","#11b716","#10d5a8","#0000ff","#9d02d7"],m="#0072b2",f="#c25010",v="#1f1f1f",S="#1f1f1f";class w{constructor(t){this.acceptChanges=!0,this.segments=[],this.sortingEnd="left",this.medians=new Map,this.segmentVisibleMedians=new Map,this.startAddingSegmentFunction=t=>{if(this.board.getAllObjectsUnderMouse(t).length>0)return;const e=this.board.getUsrCoordsOfMouse(t);this.creatingLine=this.newSegment(e,e)},this.moveEndpointWhenAddingFunction=t=>{if(void 0!==this.creatingLine){const e=this.board.getUsrCoordsOfMouse(t);this.creatingLine.p1.setPosition(JXG.COORDS_BY_USER,[this.creatingLine.p1.coords.usrCoords[1],e[1]]),this.creatingLine.p2.setPosition(JXG.COORDS_BY_USER,e),this.board.update()}},this.releaseAddingSegmentFunction=()=>{this.creatingLine=void 0},this.populatingBtn=e("#populate :input"),this.populatingBtn.prop("disabled",!1),e("#populate").on("submit",(t=>{this.populateSegments(parseInt(e("#populate-count").val())),t.preventDefault()})),this.setSortedEndRadios=e("[name=sort-endpoint]").each(((t,s)=>{e(s).on("change",(t=>this.setSortedEnd(e(t.target).val())))})).prop("disabled",!0),this.setSortedEnd(e("[name=sort-endpoint]:checked").val()),this.board=o.JSXGraph.initBoard(t,{boundingbox:[-10,10,10,-10],showCopyright:!1,showNavigation:!1,pan:{enabled:!1},zoom:{wheel:!1}}),this.board.on("down",this.startAddingSegmentFunction),this.board.on("move",this.moveEndpointWhenAddingFunction),this.board.on("up",this.releaseAddingSegmentFunction),this.queryLine=this.board.create("line",[[0,0],[0,1]],{visible:!1,fixed:!1,strokeColor:"#000",dragToTopOfLayer:!0,strokeOpacity:.5,strokeWidth:3}),this.queryLine.on("up",(()=>O.emit("queryLineChange",this.queryLine.point1.coords.usrCoords[1])))}newSegment(t,e){if(!this.acceptChanges)throw new Error("Board is frozen, new segments are not accepted.");const s=this.board.create("point",t,{withLabel:!1,color:f,size:3}),i=this.board.create("point",e,{withLabel:!1,color:f,size:3}),o=this.board.create("segment",[s,i],{strokeColor:m});return s.on("drag",(()=>i.setPosition(JXG.COORDS_BY_USER,[i.coords.usrCoords[1],s.coords.usrCoords[2]]))),i.on("drag",(()=>s.setPosition(JXG.COORDS_BY_USER,[s.coords.usrCoords[1],i.coords.usrCoords[2]]))),this.segments.push(o),this.segmentVisibleMedians.set(o.id,new h.LinkList),O.emit("newSegment",{p1:s,p2:i,l:o}),{p1:s,p2:i,l:o}}sortSegments(){const t=[...p(0,this.segments.length)];"left"===this.sortingEnd?t.sort(((t,e)=>c(this.segments[t]).left-c(this.segments[e]).left)):t.sort(((t,e)=>c(this.segments[e]).right-c(this.segments[t]).right));const[e,s]=d(-10,10,.9);for(const[i,o]of g(r(s,e,this.segments.length,!1,!1))){const e=this.segments[t[i]];e.point1.moveTo([e.point1.coords.usrCoords[1],o],400),e.point2.moveTo([e.point2.coords.usrCoords[1],o],400)}}finalizeChanges(){this.acceptChanges&&(this.acceptChanges=!1,this.populatingBtn.prop("disabled",!0),this.setSortedEndRadios.prop("disabled",!1),this.board.off("down",this.startAddingSegmentFunction),this.board.off("move",this.moveEndpointWhenAddingFunction),this.board.off("up",this.releaseAddingSegmentFunction),a(this.board,(()=>{for(let t=0;t<this.segments.length;t++){const e=this.segments[t];e.setAttribute({strokeColor:v,fixed:!0}),e.point1.setAttribute({color:S,fixed:!0,size:1.5}),e.point2.setAttribute({color:S,fixed:!0,size:1.5})}})),this.sortSegments())}populateSegments(t){const[e,s]=d(-10,10,.95),i=.04*(s-e),[o,h]=d(-10,10,.9);for(const d of r(o,h,t,!1,!1)){let t,o;do{t=n(e,s),o=n(e,s)}while(Math.abs(t-o)<i);this.newSegment([t,d],[o,d])}}addMedian(t,e,s,i=!1,o=t){if(this.medians.has(o))return!1;const n=this.board.create("line",[[t,0],[t,1]],{strokeColor:s,dash:2,visible:!1,fixed:!0});return this.medians.set(o,{line:n,relatedSegments:e,color:s}),this.setMedianVisible(o,i),!0}removeMedian(t){const e=this.medians.get(t);return void 0!==e&&(this.setMedianVisible(t,!1),this.board.removeObject(e.line),this.medians.delete(t),!0)}setMedianVisible(t,e){const s=this.medians.get(t);if(void 0!==s&&s.line.getAttribute("visible")!==e){s.line.setAttribute({visible:e});for(const i of s.relatedSegments){const s=this.segmentVisibleMedians.get(i.id);e?s.pushBack(t):s.eraseElementByValue(t);let o=this.acceptChanges?m:v,n=this.acceptChanges?f:S;const r=s.back();void 0!==r&&(o=n=this.medians.get(r).color),i.setAttribute({strokeColor:o}),i.point1.setAttribute({color:n}),i.point2.setAttribute({color:n})}}}setSortedEnd(t){this.sortingEnd!==t&&(this.sortingEnd=t,this.acceptChanges||this.sortSegments())}showQueryLine(){this.queryLine.setAttribute({visible:!0})}getQuery(){return this.queryLine.point1.coords.usrCoords[1]}}class N{constructor(t,e,s){this.nodes=[],this.edges=[],this.board=o.JSXGraph.initBoard(t,{boundingbox:[-10,10,10,-10],showCopyright:!1,drag:{enabled:!1},pan:{enabled:!0,needShift:!1,needTwoFingers:!1},zoom:{wheel:!0,needShift:!1}}),this.tree=e,this.drawTree(s),this.focusNode(e.root),this.board.on("move",(()=>{const t=this.hoveringNode;this.hoveringNode=void 0;for(let t=0;t<this.nodes.length;t++){const e=this.nodes[t];if(void 0!==e&&e.mouseover){this.hoveringNode=this.tree.nodes[t];break}}this.hoveringNode!==t&&O.emit("mouseOverNode",{node:this.hoveringNode,prevNode:t})}))}drawTree(t){const[e,s]=d(-10,10,.95),[i,o]=d(-10,10,.8);for(const[n,d]of g(r(o,i,this.tree.height,!1,!1))){const i=1<<n;for(const[o,n]of g(r(e,s,i,!1,!1))){const e=i-1+o;void 0!==this.tree.nodes[e]&&(this.nodes[e]=this.board.create("point",[n,d],{size:.5,sizeUnit:"user",withLabel:!1,strokeWidth:4,color:t.get(this.tree.nodes[e].median),visible:0===e}),e>0&&(this.edges[e]=this.board.create("line",[this.nodes[e],this.nodes[e-1>>>1]],{straightFirst:!1,straightLast:!1,visible:!1})))}}}setNodeVisible(t,e){var s,i;const o=(1<<t.depth)-1+t.peerIdx;null===(s=this.nodes[o])||void 0===s||s.setAttribute({visible:e}),null===(i=this.edges[o])||void 0===i||i.setAttribute({visible:e})}setNodeHollow(t,e){var s;void 0!==t&&(null===(s=this.graphNode(t))||void 0===s||s.setAttribute({fillOpacity:e?0:1}))}focusNode(t){this.setNodeHollow(this.focusedNode,!1),this.setNodeHollow(this.focusedNode=t,!0)}graphNode(t){return this.nodes[(1<<t.depth)-1+t.peerIdx]}}class C{constructor(t){if(this.nodes=[],0===t.length)throw new Error("Input array is empty");const e=t.slice().sort(((t,e)=>c(t).left-c(e).left)),s=t.slice().sort(((t,e)=>c(e).right-c(t).right));this.root=C.makeNode(void 0,e,s,0),this.height=this.root.height;for(const t of this.bfs())this.nodes[(1<<t.depth)-1+t.peerIdx]=t}static makeNode(t,e,s,i){if(0===e.length)return;const o=C.medianPoint(e,s),{l:n,m:r,r:d}=C.splitSegmentList(e,o),{l:h,m:a,r:l}=C.splitSegmentList(s,o),c={parent:t,depth:void 0===t?0:t.depth+1,height:1,peerIdx:i,median:o,segmentsLeftSorted:r,segmentsRightSorted:a};return c.childLeft=this.makeNode(c,n,h,2*i),c.childRight=this.makeNode(c,d,l,2*i+1),void 0!==c.childLeft&&(c.height=c.childLeft.height+1),void 0!==c.childRight&&(c.height=Math.max(c.height,c.childRight.height+1)),c}static medianPoint(t,e){const s=t.length;let i=0,o=0,n=s-1;for(let r=0;r<s;r++){const r=o>=s?void 0:l(t[o])[0].coords.usrCoords[1],d=n<0?void 0:l(e[n])[1].coords.usrCoords[1];void 0===d||r<d?(i=r,o++):(i=d,n--)}return i}static splitSegmentList(t,e){const s={l:[],m:[],r:[]};for(const i of t){const t=u(i,e);(t<0?s.l:0===t?s.m:s.r).push(i)}return s}*bfs(){const t=new h.Queue;for(t.push(this.root);t.size()>0;){const e=t.pop();void 0!==e.childLeft&&t.push(e.childLeft),void 0!==e.childRight&&t.push(e.childRight),yield e}}*inorder(){const t=new h.Stack;let e=this.root;for(;void 0!==e||!t.empty();){for(;void 0!==e;)t.push(e),e=e.childLeft;e=t.pop(),yield e,e=e.childRight}}}class y{constructor(t,e,s,i={},o=t.segmentsLeftSorted){this.treeNode=t,this.leftFinished=e,this.rightFinished=s,this.actionIdx=i,this.involvedSegs=o}}class E extends i{simulate(t){const e=this.index;super.simulate(t);const s=this.index;if(s!==e){const t={nodesReveal:[],nodesHide:[]};if(s>e)for(let i=e+1;i<=s;i++)t.nodesReveal.push(this.graph[i]);else for(let i=s+1;i<=e;i++)t.nodesHide.push(this.graph[i]);O.emit("simulationUpdate",t)}}}class L extends E{constructor(t){super(L.buildGraph(t.root),0)}static buildGraph(t){const e=[];return L.buildGraphRecursive(e,t).slice(0,-1).forEach((t=>t.actionIdx.finishSubtree=e.length-1)),e}static buildGraphRecursive(t,e){var s;const i=null!==(s=e.childLeft)&&void 0!==s?s:e.childRight,o=void 0!==e.childLeft,n=void 0!==e.childLeft&&void 0!==e.childRight,r=[new y(e,!1,!1)],d=[];r.push(),void 0!==i&&(r.push(new y(e,o,!o)),d[1]=i),n&&(r.push(new y(e,!0,!0)),d[2]=e.childRight);let h=-1;return r.forEach(((e,s)=>{s>0&&(t[h].actionIdx.recurse=t.length,this.buildGraphRecursive(t,d[s]).forEach((e=>{e.actionIdx.undoRecurse=h,e.actionIdx.finishSubtree=t.length}))),h=t.push(e)-1})),r}}class R extends E{constructor(t,e){super(R.buildGraph(t.root,e),0)}static buildGraph(t,e){const s=[];let i=t;do{s.length>0&&(s[s.length-1].actionIdx.recurse=s.length);const t=s.length>0?s.length-1:void 0;let o,n;e<i.median?(o=i.segmentsLeftSorted.filter((t=>c(t).left<=e)),n=i.childLeft):e>i.median?(o=i.segmentsLeftSorted.filter((t=>c(t).right>=e)),n=i.childRight):o=i.segmentsLeftSorted.slice(),s.push(new y(i,!1,!1,{undoRecurse:t},o)),i=n}while(void 0!==i);return s}}class B{constructor(){this.all=e("#algo-buttons button"),this.transit=e("#algo-transit"),this.recurse=e("#algo-recurse"),this.undoRecurse=e("#algo-undo-recurse"),this.finishSubtree=e("#algo-finish-subtree"),this.all.prop("disabled",!0),this.transit.on("click",(()=>O.emit("algoTransitButtonPressed",{}))),this.recurse.on("click",(()=>O.emit("algoRecurseButtonPressed",{}))),this.undoRecurse.on("click",(()=>O.emit("algoUndoRecurseButtonPressed",{}))),this.finishSubtree.on("click",(()=>O.emit("algoFinishSubtreeButtonPressed",{})))}setTransitButtonStyle(t){switch(t){case"build":this.transit.html("Start Building"),this.transit.removeClass("btn-outline-danger"),this.transit.addClass("btn-outline-primary");break;case"query":this.transit.html("Start Query"),this.transit.removeClass("btn-outline-danger"),this.transit.addClass("btn-outline-primary");break;case"reset":this.transit.html("Reset"),this.transit.removeClass("btn-outline-primary"),this.transit.addClass("btn-outline-danger")}}bindToSimulator(t){void 0!==this.bindingSimulator&&(this.bindingSimulator.simulate=this.simulateFunc.bind(this.bindingSimulator),this.recurse.off("click"),this.undoRecurse.off("click"),this.finishSubtree.off("click")),this.bindingSimulator=t,this.simulateFunc=t.simulate,t.simulate=e=>{this.simulateFunc.apply(t,[e]),this.syncWithSimulator(t)},this.recurse.on("click",(()=>t.simulate("recurse"))),this.undoRecurse.on("click",(()=>t.simulate("undoRecurse"))),this.finishSubtree.on("click",(()=>t.simulate("finishSubtree"))),this.syncWithSimulator(t)}syncWithSimulator(t){this.recurse.prop("disabled",!t.canSimulate("recurse")),this.undoRecurse.prop("disabled",!t.canSimulate("undoRecurse")),this.finishSubtree.prop("disabled",!t.canSimulate("finishSubtree"))}}class x{constructor(){this.stateName="draw",this.plotboard=new w("plotboard"),this.simButtons=new B}onEnter(t){this.simButtons.setTransitButtonStyle("build")}handleNewSegmentEvent(t){this.simButtons.transit.prop("disabled",this.plotboard.segments.length<=0)}handleAlgoTransitButtonPressedEvent(t){0!==this.plotboard.segments.length&&t.transit(new M(this.plotboard,new C(this.plotboard.segments),this.simButtons))}onExit(){this.plotboard.finalizeChanges()}}class M{constructor(t,e,s){this.stateName="build",this.tree=e,this.simulator=new L(e),this.plotboard=t,this.simButtons=s,this.colorCoding=new Map(function*(...t){const e=t.map((t=>t[Symbol.iterator]()));for(;;){const t=e.map((t=>t.next()));if(t.some((t=>t.done)))return;yield t.map((t=>t.value))}}(function*(t,e){for(const e of t)yield(s=e,s.median);var s}(e.inorder()),function*(){for(let t=0;;t++)yield b[t%b.length]}())),this.treeboard=new N("treeboard",e,this.colorCoding)}onEnter(t){for(const t of this.tree.inorder()){const e=t.median;this.plotboard.addMedian(e,t.segmentsLeftSorted,this.colorCoding.get(e),!1,"build_"+e)}this.simButtons.setTransitButtonStyle("query"),this.simButtons.bindToSimulator(this.simulator)}handleSimulationUpdateEvent(t,e){a([this.plotboard.board,this.treeboard.board],(()=>{e.nodesReveal.forEach((t=>{this.plotboard.setMedianVisible("build_"+t.treeNode.median,!0),this.treeboard.setNodeVisible(t.treeNode,!0)})),e.nodesHide.forEach((t=>{this.plotboard.setMedianVisible("build_"+t.treeNode.median,!1),this.treeboard.setNodeVisible(t.treeNode,!1)})),this.treeboard.focusNode(this.simulator.currentNode().treeNode)}))}handleMouseOverNodeEvent(t,e){a(this.plotboard.board,(()=>{if(void 0!==e.prevNode&&this.plotboard.removeMedian("hover_"+e.prevNode.median),void 0!==e.node){const t=e.node.median,s=this.treeboard.graphNode(e.node).getAttribute("highlightFillColor");this.plotboard.addMedian(t,e.node.segmentsLeftSorted,s,!0,"hover_"+t)}}))}handleAlgoTransitButtonPressedEvent(t){t.transit(new k(this.plotboard,this.treeboard,this.tree,this.simButtons,this.colorCoding))}onExit(){a(this.plotboard.board,(()=>{for(const t of this.tree.bfs())this.plotboard.removeMedian("build_"+t.median)}))}}class k{constructor(t,e,s,i,o){this.colorCoding=o,this.simulator=new R(s,t.getQuery()),this.plotboard=t,this.treeboard=e,this.tree=s,this.simButtons=i}onEnter(t){a([this.plotboard.board,this.treeboard.board],(()=>{this.plotboard.showQueryLine();for(const t of this.tree.bfs())this.treeboard.setNodeVisible(t,!0);const t=this.simulator.currentNode(),e=t.treeNode.median;this.plotboard.addMedian(e,t.involvedSegs,this.colorCoding.get(e),!0,"query_"+e),this.treeboard.focusNode(t.treeNode)})),this.simButtons.setTransitButtonStyle("reset"),this.simButtons.bindToSimulator(this.simulator)}handleSimulationUpdateEvent(t,e){a([this.plotboard.board,this.treeboard.board],(()=>{for(const t of e.nodesHide)this.plotboard.removeMedian("query_"+t.treeNode.median);for(const t of e.nodesReveal){const e=t.treeNode.median;this.plotboard.addMedian(e,t.involvedSegs,this.colorCoding.get(e),!0,"query_"+e)}this.treeboard.focusNode(this.simulator.currentNode().treeNode)}))}handleQueryLineChangeEvent(t,e){a([this.plotboard.board,this.treeboard.board],(()=>{this.simulator.graph.forEach((t=>this.plotboard.removeMedian("query_"+t.treeNode.median))),this.simulator=new R(this.tree,e);const t=this.simulator.currentNode(),s=t.treeNode.median;this.plotboard.addMedian(s,t.involvedSegs,this.colorCoding.get(s),!0,"query_"+s),this.treeboard.focusNode(t.treeNode)})),this.simButtons.bindToSimulator(this.simulator)}handleMouseOverNodeEvent(t,e){a(this.plotboard.board,(()=>{if(void 0!==e.prevNode&&this.plotboard.removeMedian("hover_"+e.prevNode.median),void 0!==e.node){const t=e.node.median,s=this.treeboard.graphNode(e.node).getAttribute("highlightFillColor");this.plotboard.addMedian(t,e.node.segmentsLeftSorted,s,!0,"hover_"+t)}}))}handleAlgoTransitButtonPressedEvent(t){window.location.reload()}onExit(){}}class A extends s{constructor(){super(new x)}getGenericEventHandler(t){const e=`handle${s=t,s.charAt(0).toUpperCase()+s.slice(1)}Event`;var s;return t=>{const s=this.state[e];null==s||s.apply(this.state,[this,t])}}}const O=new class{constructor(){this.eventListeners=new Map}emit(t,e){var s;for(const i of null!==(s=this.eventListeners.get(t))&&void 0!==s?s:[])i(e)}on(t,e){const s=this.eventListeners.get(t);void 0===s?this.eventListeners.set(t,[e]):s.push(e)}};e((()=>{const t=new A;["algoTransitButtonPressed","newSegment","algoRecurseButtonPressed","algoUndoRecurseButtonPressed","algoFinishSubtreeButtonPressed","simulationUpdate","mouseOverNode","queryLineChange"].forEach((e=>O.on(e,t.getGenericEventHandler(e))))}))})();